[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "get_all_genres",
        "importPath": "api_data_retrieve",
        "description": "api_data_retrieve",
        "isExtraImport": true,
        "detail": "api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movies_by_page",
        "importPath": "api_data_retrieve",
        "description": "api_data_retrieve",
        "isExtraImport": true,
        "detail": "api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_credits",
        "importPath": "api_data_retrieve",
        "description": "api_data_retrieve",
        "isExtraImport": true,
        "detail": "api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_images",
        "importPath": "api_data_retrieve",
        "description": "api_data_retrieve",
        "isExtraImport": true,
        "detail": "api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "redirect_stdout",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "get_all_genres",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_all_genres():\n    \"\"\"\n    Fetch all movie genres from TMDb.\n    Endpoint: GET /genre/movie/list\n    :return: A JSON object containing genres data.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/genre/movie/list\"\n    response = requests.get(url, headers=HEADERS)",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movies_by_genre",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movies_by_genre(genre_id):\n    \"\"\"\n    Fetch movies filtered by a specific genre.\n    Endpoint: GET /discover/movie?with_genres=<genre_id>\n    :param genre_id: The genre ID (int or str) to filter by.\n    :return: A JSON object containing the matching movies.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/discover/movie\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movies_by_page",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movies_by_page(page):\n    \"\"\"\n    Fetch popular movies by page.\n    Endpoint: GET /movie/popular?page=<page>\n    :param page: The page number (int).\n    :return: A JSON object containing popular movies for the given page.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/popular\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_by_id",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movie_by_id(movie_id):\n    \"\"\"\n    Fetch movie details by its ID.\n    Endpoint: GET /movie/<movie_id>\n    :param movie_id: The movie's ID (int or str).\n    :return: A JSON object containing the movie details.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/{movie_id}\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_images",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movie_images(movie_id):\n    \"\"\"\n    Fetch all images for a specific movie.\n    Endpoint: GET /movie/<movie_id>/images\n    :param movie_id: The movie's ID (int or str).\n    :return: A JSON object containing image details.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/{movie_id}/images\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_credits",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movie_credits(movie_id):\n    \"\"\"\n    Fetch cast and crew information for a specific movie.\n    Endpoint: GET /movie/<movie_id>/credits\n    :param movie_id: The movie's ID (int or str).\n    :return: A JSON object containing cast and crew details.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/{movie_id}/credits\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "BASE_URL = 'https://api.themoviedb.org/3'\n# Retrieve the TMDb Bearer token from environment variables\nTMDB_BEARER_TOKEN = os.environ.get(\"TMDB_BEARER_TOKEN\")\nif not TMDB_BEARER_TOKEN:\n    raise EnvironmentError(\n        \"TMDB_BEARER_TOKEN is not set in the environment variables.\")\n# Define common headers for the API requests\nHEADERS = {\n    \"Authorization\": f\"Bearer {TMDB_BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json;charset=utf-8\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "TMDB_BEARER_TOKEN",
        "kind": 5,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "TMDB_BEARER_TOKEN = os.environ.get(\"TMDB_BEARER_TOKEN\")\nif not TMDB_BEARER_TOKEN:\n    raise EnvironmentError(\n        \"TMDB_BEARER_TOKEN is not set in the environment variables.\")\n# Define common headers for the API requests\nHEADERS = {\n    \"Authorization\": f\"Bearer {TMDB_BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json;charset=utf-8\"\n}\ndef get_all_genres():",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "kind": 5,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "HEADERS = {\n    \"Authorization\": f\"Bearer {TMDB_BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json;charset=utf-8\"\n}\ndef get_all_genres():\n    \"\"\"\n    Fetch all movie genres from TMDb.\n    Endpoint: GET /genre/movie/list\n    :return: A JSON object containing genres data.\n    :rtype: dict",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "create_db",
        "kind": 2,
        "importPath": "src.create_db_script",
        "description": "src.create_db_script",
        "peekOfCode": "def create_db():\n    \"\"\"\n    Connects to MySQL, creates (if needed) a database, and then creates the required tables.\n    \"\"\"\n    print(\"Creating the database and tables...\")\n    db_host = os.getenv('MYSQL_HOST')\n    db_user = os.getenv('MYSQL_USER')\n    db_password = os.getenv('MYSQL_PASSWORD')\n    db_name = os.getenv('MYSQL_DATABASE')\n    print(f\"Creating database {db_name}...\")",
        "detail": "src.create_db_script",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Creates and returns a MySQL database connection.\n    Adjust host, user, password, and db name as needed.\n    \"\"\"\n    try:\n        conn = mysql.connector.connect(\n            host=os.getenv(\"MYSQL_HOST\"),\n            user=os.getenv(\"MYSQL_USER\"),\n            password=os.getenv(\"MYSQL_PASSWORD\"),",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_1_seed_movies_1",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_1_seed_movies_1():\n    \"\"\"\n    Inserts popular movies into the 'movies' table by fetching pages\n    from the TMDb API. Demonstrates a 'seeding' query function.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect to DB for seeding movies.\")\n        return\n    cursor = connection.cursor()",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_1_seed_movies",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_1_seed_movies():\n    \"\"\"\n    Inserts popular movies into the 'movies' table by fetching pages\n    from the TMDb API. Then also populates 'movie_genres' using TMDb's\n    genre_ids for each inserted movie.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect to DB for seeding movies.\")\n        return",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_2_seed_genres",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_2_seed_genres():\n    \"\"\"\n    Inserts genre data into the 'genres' table by fetching from the TMDb API.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect to DB for seeding genres.\")\n        return\n    cursor = connection.cursor()\n    try:",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_3_seed_cast_and_crew",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_3_seed_cast_and_crew():\n    \"\"\"\n    For each movie in 'movies', fetch the cast & crew from the TMDb API\n    and insert them into 'persons' and 'movie_credits' tables.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect to DB for seeding cast and crew.\")\n        return\n    cursor = connection.cursor(dictionary=True)",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_4_seed_images",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_4_seed_images():\n    \"\"\"\n    For each movie in 'movies', fetch images from the TMDb API\n    and insert them into the 'images' table.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect to DB for seeding images.\")\n        return\n    cursor = connection.cursor(dictionary=True)",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_5_example_report",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_5_example_report():\n    \"\"\"\n    Example read-only query that might do something interesting:\n    e.g., find the top 5 most popular movies. \n    This isn't a 'seed' function; it's a typical SELECT query.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect for query_5_example_report.\")\n        return []",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def main():\n    \"\"\"\n    Demonstrates calling each query (i.e., each 'seeding' routine)\n    in sequence, plus an example read-only query.\n    \"\"\"\n    print(\"Starting DB seeding / queries...\")\n    # 1) Seed the 'genres' table\n    query_2_seed_genres()\n    # 2) Seed the 'movies' table\n    query_1_seed_movies()",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "src.queries_execution",
        "description": "src.queries_execution",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Returns a MySQL database connection using env variables:\n    MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE.\n    \"\"\"\n    try:\n        conn = mysql.connector.connect(\n            host=os.getenv(\"MYSQL_HOST\"),\n            user=os.getenv(\"MYSQL_USER\"),\n            password=os.getenv(\"MYSQL_PASSWORD\"),",
        "detail": "src.queries_execution",
        "documentation": {}
    },
    {
        "label": "query_1_most_popular_movie_with_top_actors",
        "kind": 2,
        "importPath": "src.queries_execution",
        "description": "src.queries_execution",
        "peekOfCode": "def query_1_most_popular_movie_with_top_actors():\n    \"\"\"\n    1) Find the most popular movie.\n    2) Return up to 10 most popular actors in that movie, along with actor details.\n    Returns a list of dictionaries with keys:\n      - movie_title\n      - actor_name\n      - actor_popularity\n    \"\"\"\n    conn = get_db_connection()",
        "detail": "src.queries_execution",
        "documentation": {}
    },
    {
        "label": "query_2_genre_movie_counts_and_top_movie",
        "kind": 2,
        "importPath": "src.queries_execution",
        "description": "src.queries_execution",
        "peekOfCode": "def query_2_genre_movie_counts_and_top_movie():\n    \"\"\"\n    Returns, for each genre:\n      1) Genre name\n      2) Number of movies of that genre\n      3) The title of the most popular movie in that genre\n    Example columns in the returned dictionaries:\n      - genre_name\n      - movie_count\n      - most_popular_movie",
        "detail": "src.queries_execution",
        "documentation": {}
    },
    {
        "label": "query_3_fulltext_search_in_title",
        "kind": 2,
        "importPath": "src.queries_execution",
        "description": "src.queries_execution",
        "peekOfCode": "def query_3_fulltext_search_in_title(substring):\n    \"\"\"\n    Full-text search in the 'movies.title' column.\n    For best substring matching, we can use a Boolean mode with an asterisk:\n      e.g. substring + '*'\n    Then order by popularity desc, limit 10.\n    Returns a list of dicts with:\n      - id\n      - title\n      - popularity",
        "detail": "src.queries_execution",
        "documentation": {}
    },
    {
        "label": "query_4_group_roles_by_gender",
        "kind": 2,
        "importPath": "src.queries_execution",
        "description": "src.queries_execution",
        "peekOfCode": "def query_4_group_roles_by_gender():\n    \"\"\"\n    Returns aggregated counts of persons by role (cast vs crew),\n    gender, and specific job (e.g., Director).\n    The CASE expression translates them into Hebrew category names.\n    Example returned columns:\n      - category (str)\n      - total (int)\n    \"\"\"\n    conn = get_db_connection()",
        "detail": "src.queries_execution",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.queries_execution",
        "description": "src.queries_execution",
        "peekOfCode": "def main():\n    \"\"\"\n    Demonstrates calling each query in sequence and printing the results.\n    Adjust or remove as needed for your assignment submission.\n    \"\"\"\n    print(\"\\n--- Query #1: Most popular movie & top 10 actors ---\")\n    q1_results = query_1_most_popular_movie_with_top_actors()\n    for row in q1_results:\n        print(f\"Movie: {row['movie_title']}, Actor: {\n              row['actor_name']}, Actor Popularity: {row['actor_popularity']}\")",
        "detail": "src.queries_execution",
        "documentation": {}
    },
    {
        "label": "main_to_file",
        "kind": 2,
        "importPath": "src.queries_execution",
        "description": "src.queries_execution",
        "peekOfCode": "def main_to_file():\n    \"\"\"\n    Demonstrates calling each query in sequence and printing the results\n    to 'results.txt'.\n    \"\"\"\n    # Open 'results.txt' in write mode\n    with open(\"results.txt\", \"w\", encoding=\"utf-8\") as f:\n        # Temporarily redirect stdout to the file\n        with redirect_stdout(f):\n            print(\"\\n--- Query #1: Most popular movie & top 10 actors ---\")",
        "detail": "src.queries_execution",
        "documentation": {}
    }
]