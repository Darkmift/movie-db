[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "errorcode",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "errorcode",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "isExtraImport": true,
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "headers",
        "importPath": "common",
        "description": "common",
        "isExtraImport": true,
        "detail": "common",
        "documentation": {}
    },
    {
        "label": "VALID_TABLES",
        "importPath": "common",
        "description": "common",
        "isExtraImport": true,
        "detail": "common",
        "documentation": {}
    },
    {
        "label": "DATABASE_NAME",
        "importPath": "common",
        "description": "common",
        "isExtraImport": true,
        "detail": "common",
        "documentation": {}
    },
    {
        "label": "DATABASE_NAME",
        "importPath": "common",
        "description": "common",
        "isExtraImport": true,
        "detail": "common",
        "documentation": {}
    },
    {
        "label": "DATABASE_NAME",
        "importPath": "common",
        "description": "common",
        "isExtraImport": true,
        "detail": "common",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "create_tables",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "importPath": "services.user_service",
        "description": "services.user_service",
        "isExtraImport": true,
        "detail": "services.user_service",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "services.user_service",
        "description": "services.user_service",
        "isExtraImport": true,
        "detail": "services.user_service",
        "documentation": {}
    },
    {
        "label": "get_user_by_id",
        "importPath": "services.user_service",
        "description": "services.user_service",
        "isExtraImport": true,
        "detail": "services.user_service",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seed",
        "description": "seed",
        "detail": "seed",
        "documentation": {}
    },
    {
        "label": "get_movies",
        "importPath": "getApiData",
        "description": "getApiData",
        "isExtraImport": true,
        "detail": "getApiData",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "get_all_genres",
        "importPath": "movie_api",
        "description": "movie_api",
        "isExtraImport": true,
        "detail": "movie_api",
        "documentation": {}
    },
    {
        "label": "get_movies_by_page",
        "importPath": "movie_api",
        "description": "movie_api",
        "isExtraImport": true,
        "detail": "movie_api",
        "documentation": {}
    },
    {
        "label": "get_movie_credits",
        "importPath": "movie_api",
        "description": "movie_api",
        "isExtraImport": true,
        "detail": "movie_api",
        "documentation": {}
    },
    {
        "label": "get_movie_images",
        "importPath": "movie_api",
        "description": "movie_api",
        "isExtraImport": true,
        "detail": "movie_api",
        "documentation": {}
    },
    {
        "label": "create_tables",
        "importPath": "services.db",
        "description": "services.db",
        "isExtraImport": true,
        "detail": "services.db",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "importPath": "services.db",
        "description": "services.db",
        "isExtraImport": true,
        "detail": "services.db",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "importPath": "services.db",
        "description": "services.db",
        "isExtraImport": true,
        "detail": "services.db",
        "documentation": {}
    },
    {
        "label": "services.movie_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "services.movie_api",
        "description": "services.movie_api",
        "detail": "services.movie_api",
        "documentation": {}
    },
    {
        "label": "get_all_genres",
        "importPath": "api_data_retrieve",
        "description": "api_data_retrieve",
        "isExtraImport": true,
        "detail": "api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movies_by_page",
        "importPath": "api_data_retrieve",
        "description": "api_data_retrieve",
        "isExtraImport": true,
        "detail": "api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_credits",
        "importPath": "api_data_retrieve",
        "description": "api_data_retrieve",
        "isExtraImport": true,
        "detail": "api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_images",
        "importPath": "api_data_retrieve",
        "description": "api_data_retrieve",
        "isExtraImport": true,
        "detail": "api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "func0",
        "kind": 2,
        "importPath": "legacy.old stuff.api_data_retrieve",
        "description": "legacy.old stuff.api_data_retrieve",
        "peekOfCode": "def func0(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)\n    print(response.text)\ndef func1(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)\n    print(response.text)\ndef func2(headers):\n    url = \"someurl\"",
        "detail": "legacy.old stuff.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "legacy.old stuff.api_data_retrieve",
        "description": "legacy.old stuff.api_data_retrieve",
        "peekOfCode": "def func1(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)\n    print(response.text)\ndef func2(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)\n    print(response.text)\ndef func3(headers):\n    url = \"someurl\"",
        "detail": "legacy.old stuff.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "legacy.old stuff.api_data_retrieve",
        "description": "legacy.old stuff.api_data_retrieve",
        "peekOfCode": "def func2(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)\n    print(response.text)\ndef func3(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)\n    print(response.text)\ndef func4(headers):\n    url = \"someurl\"",
        "detail": "legacy.old stuff.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "legacy.old stuff.api_data_retrieve",
        "description": "legacy.old stuff.api_data_retrieve",
        "peekOfCode": "def func3(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)\n    print(response.text)\ndef func4(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)\n    print(response.text)\ndef insert_multiple_records(table_name, data_rows):\n    \"\"\"",
        "detail": "legacy.old stuff.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "legacy.old stuff.api_data_retrieve",
        "description": "legacy.old stuff.api_data_retrieve",
        "peekOfCode": "def func4(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)\n    print(response.text)\ndef insert_multiple_records(table_name, data_rows):\n    \"\"\"\n    Insert multiple records into a valid table from our allow list.\n    :param table_name: Name of the table to insert the data\n    :param data_rows: A list of tuples, where each tuple represents one row of data\n    \"\"\"",
        "detail": "legacy.old stuff.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "insert_multiple_records",
        "kind": 2,
        "importPath": "legacy.old stuff.api_data_retrieve",
        "description": "legacy.old stuff.api_data_retrieve",
        "peekOfCode": "def insert_multiple_records(table_name, data_rows):\n    \"\"\"\n    Insert multiple records into a valid table from our allow list.\n    :param table_name: Name of the table to insert the data\n    :param data_rows: A list of tuples, where each tuple represents one row of data\n    \"\"\"\n    #Prevent SQL injection by checking that the table name is valid using a whitelist\n    # 1) Ensure the table is in the allow list\n    if table_name not in VALID_TABLES:\n        raise ValueError(f\"Table '{table_name}' is not in the allow list and cannot be used.\")",
        "detail": "legacy.old stuff.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "legacy.old stuff.api_data_retrieve",
        "description": "legacy.old stuff.api_data_retrieve",
        "peekOfCode": "def main(): \n    print(\"hi\")\n    insert_multiple_records(\"new_table_test\", [(\"11\", \"John\", \"2021-08-09\"), (\"21\", \"Peter\", \"2021-08-09\"), (\"31\", \"Amy\", \"2021-08-09\"), (\"4\", \"Hannah\", \"2021-08-09\"), (\"15\", \"Michael\", \"2021-08-09\")])\nif __name__ == \"__main__\":\n    main()",
        "detail": "legacy.old stuff.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "mydb",
        "kind": 5,
        "importPath": "legacy.old stuff.api_data_retrieve",
        "description": "legacy.old stuff.api_data_retrieve",
        "peekOfCode": "mydb = mysql.connector.connect(\n    host=\"127.0.0.2\",\n    port=\"3333\",\n    user=\"natanel\",\n    password=\"nat72836\",\n    database={DATABASE_NAME}\n)\ndef func0(headers):\n    url = \"someurl\"\n    response = requests.get(url, headers=headers)",
        "detail": "legacy.old stuff.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "DATABASE_NAME",
        "kind": 5,
        "importPath": "legacy.old stuff.common",
        "description": "legacy.old stuff.common",
        "peekOfCode": "DATABASE_NAME = \"natanel\"\nVALID_TABLES = {\n    \"new_table_test\": [\"idnew_table_test\", \"new_table_testcol\", \"new_table_testcol1\"],\n}\nheaders = {\n    \"accept\": \"application/json\",\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZWUyNWMxYWM5NzM5MmQzMjdlYzg3NDExNzVlNjczMSIsIm5iZiI6MTczNzcxNjM2NC45NTUwMDAyLCJzdWIiOiI2NzkzNzI4Y2ZlYWM5YjcxMjYyMzhlZmUiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.4gAL2BOokc3z0rsY9utH5zkfAsw4D7zjdafxmKuuKBA\"\n}",
        "detail": "legacy.old stuff.common",
        "documentation": {}
    },
    {
        "label": "VALID_TABLES",
        "kind": 5,
        "importPath": "legacy.old stuff.common",
        "description": "legacy.old stuff.common",
        "peekOfCode": "VALID_TABLES = {\n    \"new_table_test\": [\"idnew_table_test\", \"new_table_testcol\", \"new_table_testcol1\"],\n}\nheaders = {\n    \"accept\": \"application/json\",\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZWUyNWMxYWM5NzM5MmQzMjdlYzg3NDExNzVlNjczMSIsIm5iZiI6MTczNzcxNjM2NC45NTUwMDAyLCJzdWIiOiI2NzkzNzI4Y2ZlYWM5YjcxMjYyMzhlZmUiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.4gAL2BOokc3z0rsY9utH5zkfAsw4D7zjdafxmKuuKBA\"\n}",
        "detail": "legacy.old stuff.common",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "legacy.old stuff.common",
        "description": "legacy.old stuff.common",
        "peekOfCode": "headers = {\n    \"accept\": \"application/json\",\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZWUyNWMxYWM5NzM5MmQzMjdlYzg3NDExNzVlNjczMSIsIm5iZiI6MTczNzcxNjM2NC45NTUwMDAyLCJzdWIiOiI2NzkzNzI4Y2ZlYWM5YjcxMjYyMzhlZmUiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.4gAL2BOokc3z0rsY9utH5zkfAsw4D7zjdafxmKuuKBA\"\n}",
        "detail": "legacy.old stuff.common",
        "documentation": {}
    },
    {
        "label": "mydb",
        "kind": 5,
        "importPath": "legacy.old stuff.create_db_script",
        "description": "legacy.old stuff.create_db_script",
        "peekOfCode": "mydb = mysql.connector.connect(\n    host=\"127.0.0.2\",\n    port=\"3333\",\n    user=\"natanel\",\n    password=\"nat72836\",\n    database=DATABASE_NAME\n)\ncursor = mydb.cursor()\n#Use https://www.w3schools.com/python/python_mysql_create_table.asp\n# 1. country",
        "detail": "legacy.old stuff.create_db_script",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "legacy.old stuff.create_db_script",
        "description": "legacy.old stuff.create_db_script",
        "peekOfCode": "cursor = mydb.cursor()\n#Use https://www.w3schools.com/python/python_mysql_create_table.asp\n# 1. country\ntry:\n    cursor.execute(\"\"\"\n        CREATE TABLE country (\n            country_id INT AUTO_INCREMENT PRIMARY KEY,\n            name       VARCHAR(255) NOT NULL,\n            iso_code   VARCHAR(3),\n            region     VARCHAR(255),",
        "detail": "legacy.old stuff.create_db_script",
        "documentation": {}
    },
    {
        "label": "get_movies",
        "kind": 2,
        "importPath": "legacy.old stuff.getmovie",
        "description": "legacy.old stuff.getmovie",
        "peekOfCode": "def get_movies():\n    url = \"https://api.themoviedb.org/3/genre/movie/list\"\n    headers = {\n        \"Authorization\": f\"Bearer {os.getenv('TOKEN')}\"\n    }\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:",
        "detail": "legacy.old stuff.getmovie",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "def initialize_db():\n    logger.info(\"Initializing database...\")\n    try:\n        seed.run_seed()  # Ensure seed.py has a function `run_seed()`\n        logger.info(\"Database initialized successfully.\")\n    except Exception as e:\n        logger.error(f\"Error initializing database: {e}\")\ninitialize_db()\n@app.route('/users', methods=['GET'])\ndef get_users():",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "def get_users():\n    try:\n        users = get_all_users()\n        return jsonify({\"success\": True, \"data\": users})\n    except Exception as e:\n        logger.error(f\"Error fetching users: {e}\")\n        return jsonify({\"success\": False, \"message\": \"Internal Server Error\"}), 500\n@app.route('/users/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n    if user_id <= 0:",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "def get_user(user_id):\n    if user_id <= 0:\n        return jsonify({\"success\": False, \"message\": \"User ID must be a positive integer\"}), 400\n    try:\n        user = get_user_by_id(user_id)\n        if not user:\n            return jsonify({\"success\": False, \"message\": \"User not found\"}), 404\n        return jsonify({\"success\": True, \"data\": user})\n    except Exception as e:\n        logger.error(f\"Error fetching user {user_id}: {e}\")",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "def add_user():\n    data = request.json\n    if not data or 'name' not in data:\n        return jsonify({\"success\": False, \"message\": \"Invalid input\"}), 400\n    try:\n        result = create_user(data)\n        return jsonify({\"success\": True, \"message\": \"User added successfully\", \"data\": result}), 201\n    except Exception as e:\n        logger.error(f\"Error adding user: {e}\")\n        return jsonify({\"success\": False, \"message\": \"Internal Server Error\"}), 500",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "fetch_movies",
        "kind": 2,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "def fetch_movies():\n    try:\n        movies = get_movies()\n        return jsonify({\"success\": True, \"data\": movies})\n    except Exception as e:\n        logger.error(f\"Error fetching movies: {e}\")\n        return jsonify({\"success\": False, \"message\": \"Failed to fetch movies\"}), 500\nif __name__ == '__main__':\n    logger.info(\"Starting Flask server...\")\n    app.run(debug=True)",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "logger = logging.getLogger(__name__)\napp = Flask(__name__)\n# MySQL configuration\napp.config['MYSQL_HOST'] = os.getenv('DB_HOST')\napp.config['MYSQL_USER'] = os.getenv('DB_USER')\napp.config['MYSQL_PASSWORD'] = os.getenv('DB_PASSWORD')\napp.config['MYSQL_DATABASE'] = os.getenv('DB_NAME')\nmysql.init_app(app)\n# Run seed script if database is not initialized\ndef initialize_db():",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "app = Flask(__name__)\n# MySQL configuration\napp.config['MYSQL_HOST'] = os.getenv('DB_HOST')\napp.config['MYSQL_USER'] = os.getenv('DB_USER')\napp.config['MYSQL_PASSWORD'] = os.getenv('DB_PASSWORD')\napp.config['MYSQL_DATABASE'] = os.getenv('DB_NAME')\nmysql.init_app(app)\n# Run seed script if database is not initialized\ndef initialize_db():\n    logger.info(\"Initializing database...\")",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "app.config['MYSQL_HOST']",
        "kind": 5,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "app.config['MYSQL_HOST'] = os.getenv('DB_HOST')\napp.config['MYSQL_USER'] = os.getenv('DB_USER')\napp.config['MYSQL_PASSWORD'] = os.getenv('DB_PASSWORD')\napp.config['MYSQL_DATABASE'] = os.getenv('DB_NAME')\nmysql.init_app(app)\n# Run seed script if database is not initialized\ndef initialize_db():\n    logger.info(\"Initializing database...\")\n    try:\n        seed.run_seed()  # Ensure seed.py has a function `run_seed()`",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "app.config['MYSQL_USER']",
        "kind": 5,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "app.config['MYSQL_USER'] = os.getenv('DB_USER')\napp.config['MYSQL_PASSWORD'] = os.getenv('DB_PASSWORD')\napp.config['MYSQL_DATABASE'] = os.getenv('DB_NAME')\nmysql.init_app(app)\n# Run seed script if database is not initialized\ndef initialize_db():\n    logger.info(\"Initializing database...\")\n    try:\n        seed.run_seed()  # Ensure seed.py has a function `run_seed()`\n        logger.info(\"Database initialized successfully.\")",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "app.config['MYSQL_PASSWORD']",
        "kind": 5,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "app.config['MYSQL_PASSWORD'] = os.getenv('DB_PASSWORD')\napp.config['MYSQL_DATABASE'] = os.getenv('DB_NAME')\nmysql.init_app(app)\n# Run seed script if database is not initialized\ndef initialize_db():\n    logger.info(\"Initializing database...\")\n    try:\n        seed.run_seed()  # Ensure seed.py has a function `run_seed()`\n        logger.info(\"Database initialized successfully.\")\n    except Exception as e:",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "app.config['MYSQL_DATABASE']",
        "kind": 5,
        "importPath": "legacy.old stuff.gpt",
        "description": "legacy.old stuff.gpt",
        "peekOfCode": "app.config['MYSQL_DATABASE'] = os.getenv('DB_NAME')\nmysql.init_app(app)\n# Run seed script if database is not initialized\ndef initialize_db():\n    logger.info(\"Initializing database...\")\n    try:\n        seed.run_seed()  # Ensure seed.py has a function `run_seed()`\n        logger.info(\"Database initialized successfully.\")\n    except Exception as e:\n        logger.error(f\"Error initializing database: {e}\")",
        "detail": "legacy.old stuff.gpt",
        "documentation": {}
    },
    {
        "label": "query_1",
        "kind": 2,
        "importPath": "legacy.old stuff.queries_db_script",
        "description": "legacy.old stuff.queries_db_script",
        "peekOfCode": "def query_1(company_name):\n    \"\"\"\n    get_total_revenue_for_company -\n    Returns the total revenue for a given production company by summing\n    (box_office - budget) for all its movies. May return negative if\n    budgets exceed box_office totals.\n    :param company_name: The name of the production company (string).\n    :return: A float (total revenue) or None if the company doesn't exist\n        or has no movies.\n    \"\"\"",
        "detail": "legacy.old stuff.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_2",
        "kind": 2,
        "importPath": "legacy.old stuff.queries_db_script",
        "description": "legacy.old stuff.queries_db_script",
        "peekOfCode": "def query_2(movie_name):\n    \"\"\"\n    get_top_profitable_movies_by_name\n    Searches for the top 10 most profitable movies containing the given movie name.\n    :param movie_name: The movie name keyword to search for (string).\n    :return: A list of tuples (title, production_company, revenue) sorted by profitability.\n    \"\"\"\n    try:\n        # Establish database connection\n        mydb = mysql.connector.connect(",
        "detail": "legacy.old stuff.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_3",
        "kind": 2,
        "importPath": "legacy.old stuff.queries_db_script",
        "description": "legacy.old stuff.queries_db_script",
        "peekOfCode": "def query_3(production_company_name):\n    \"\"\"\n    get_top_countries_by_movies:\n    Returns the top 5 countries where a given production company has produced the most movies.\n    :param production_company_name: The name of the production company (string).\n    :return: A list of tuples (country_name, movie_count) ordered by the most movies.\n    \"\"\"\n    try:\n        # Establish database connection\n        mydb = mysql.connector.connect(",
        "detail": "legacy.old stuff.queries_db_script",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "legacy.services.db",
        "description": "legacy.services.db",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Establish a connection to the MySQL database using credentials from .env.\n    \"\"\"\n    try:\n        connection = mysql.connector.connect(\n            host=os.getenv('MYSQL_HOST', 'localhost'),\n            user=os.getenv('MYSQL_USER', 'root'),\n            password=os.getenv('MYSQL_PASSWORD', 'root12345'),\n            database=os.getenv('MYSQL_DATABASE', 'movie_db')",
        "detail": "legacy.services.db",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "kind": 2,
        "importPath": "legacy.services.db",
        "description": "legacy.services.db",
        "peekOfCode": "def initialize_database():\n    \"\"\"\n    Create the MySQL database if it doesn't exist.\n    This function connects without specifying a database, creates the database,\n    and then closes the connection.\n    \"\"\"\n    try:\n        connection = mysql.connector.connect(\n            host=os.getenv('MYSQL_HOST', 'localhost'),\n            user=os.getenv('MYSQL_USER', 'root'),",
        "detail": "legacy.services.db",
        "documentation": {}
    },
    {
        "label": "create_tables",
        "kind": 2,
        "importPath": "legacy.services.db",
        "description": "legacy.services.db",
        "peekOfCode": "def create_tables():\n    \"\"\"\n    Create the necessary tables in the movie_db database if they don't exist.\n    This version uses a 'persons' table and a unified 'movie_credits' table to\n    capture both cast and crew credit lines.\n    \"\"\"\n    connection = get_db_connection()\n    if connection is None:\n        print(\"Cannot create tables because the connection failed.\")\n        return",
        "detail": "legacy.services.db",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "kind": 2,
        "importPath": "legacy.services.db",
        "description": "legacy.services.db",
        "peekOfCode": "def execute_query(query, params=None, commit=False, fetchone=False, fetchall=False):\n    \"\"\"\n    A helper function to execute a given SQL query using the DB connection.\n    :param query: SQL query to be executed.\n    :param params: Optional parameters to use with the query.\n    :param commit: If True, commit the transaction.\n    :param fetchone: If True, return a single row.\n    :param fetchall: If True, return all rows.\n    :return: Result of the query if fetching, otherwise None.\n    \"\"\"",
        "detail": "legacy.services.db",
        "documentation": {}
    },
    {
        "label": "get_all_genres",
        "kind": 2,
        "importPath": "legacy.services.movie_api",
        "description": "legacy.services.movie_api",
        "peekOfCode": "def get_all_genres():\n    \"\"\"\n    Fetch all movie genres.\n    Endpoint: /genre/movie/list\n    \"\"\"\n    url = f\"{BASE_URL}/genre/movie/list\"\n    response = requests.get(url, headers=HEADERS)\n    response.raise_for_status()\n    return response.json()\ndef get_movies_by_genre(genre):",
        "detail": "legacy.services.movie_api",
        "documentation": {}
    },
    {
        "label": "get_movies_by_genre",
        "kind": 2,
        "importPath": "legacy.services.movie_api",
        "description": "legacy.services.movie_api",
        "peekOfCode": "def get_movies_by_genre(genre):\n    \"\"\"\n    Fetch movies filtered by a specific genre.\n    Endpoint: /discover/movie?with_genres=<genre>\n    :param genre: Genre id as a string or integer.\n    \"\"\"\n    url = f\"{BASE_URL}/discover/movie\"\n    params = {\n        \"with_genres\": genre\n    }",
        "detail": "legacy.services.movie_api",
        "documentation": {}
    },
    {
        "label": "get_movies_by_page",
        "kind": 2,
        "importPath": "legacy.services.movie_api",
        "description": "legacy.services.movie_api",
        "peekOfCode": "def get_movies_by_page(page):\n    \"\"\"\n    Fetch popular movies for a given page.\n    Endpoint: /movie/popular?page=<page>\n    :param page: Page number as an integer.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/popular\"\n    params = {\n        \"page\": page\n    }",
        "detail": "legacy.services.movie_api",
        "documentation": {}
    },
    {
        "label": "get_movie_by_id",
        "kind": 2,
        "importPath": "legacy.services.movie_api",
        "description": "legacy.services.movie_api",
        "peekOfCode": "def get_movie_by_id(movie_id):\n    \"\"\"\n    Fetch movie details by its ID.\n    Endpoint: /movie/<movie_id>\n    :param movie_id: The movie's ID.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/{movie_id}\"\n    response = requests.get(url, headers=HEADERS)\n    response.raise_for_status()\n    return response.json()",
        "detail": "legacy.services.movie_api",
        "documentation": {}
    },
    {
        "label": "get_movie_images",
        "kind": 2,
        "importPath": "legacy.services.movie_api",
        "description": "legacy.services.movie_api",
        "peekOfCode": "def get_movie_images(movie_id):\n    \"\"\"\n    Fetch all images for a specific movie.\n    Endpoint: /movie/<movie_id>/images\n    :param movie_id: The movie's ID.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/{movie_id}/images\"\n    response = requests.get(url, headers=HEADERS)\n    response.raise_for_status()\n    return response.json()",
        "detail": "legacy.services.movie_api",
        "documentation": {}
    },
    {
        "label": "get_movie_credits",
        "kind": 2,
        "importPath": "legacy.services.movie_api",
        "description": "legacy.services.movie_api",
        "peekOfCode": "def get_movie_credits(movie_id):\n    \"\"\"\n    Fetch cast and crew information for a specific movie.\n    Endpoint: /movie/<movie_id>/credits\n    :param movie_id: The movie's ID.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/{movie_id}/credits\"\n    response = requests.get(url, headers=HEADERS)\n    response.raise_for_status()\n    return response.json()",
        "detail": "legacy.services.movie_api",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "legacy.services.movie_api",
        "description": "legacy.services.movie_api",
        "peekOfCode": "BASE_URL = 'https://api.themoviedb.org/3'\n# Retrieve the TMDb Bearer token from environment variables\nTMDB_BEARER_TOKEN = os.environ.get(\"TMDB_BEARER_TOKEN\")\nif not TMDB_BEARER_TOKEN:\n    raise Exception(\"TMDB_BEARER_TOKEN is not set in the environment variables.\")\n# Define common headers for the API requests\nHEADERS = {\n    \"Authorization\": f\"Bearer {TMDB_BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json;charset=utf-8\"\n}",
        "detail": "legacy.services.movie_api",
        "documentation": {}
    },
    {
        "label": "TMDB_BEARER_TOKEN",
        "kind": 5,
        "importPath": "legacy.services.movie_api",
        "description": "legacy.services.movie_api",
        "peekOfCode": "TMDB_BEARER_TOKEN = os.environ.get(\"TMDB_BEARER_TOKEN\")\nif not TMDB_BEARER_TOKEN:\n    raise Exception(\"TMDB_BEARER_TOKEN is not set in the environment variables.\")\n# Define common headers for the API requests\nHEADERS = {\n    \"Authorization\": f\"Bearer {TMDB_BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json;charset=utf-8\"\n}\ndef get_all_genres():\n    \"\"\"",
        "detail": "legacy.services.movie_api",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "kind": 5,
        "importPath": "legacy.services.movie_api",
        "description": "legacy.services.movie_api",
        "peekOfCode": "HEADERS = {\n    \"Authorization\": f\"Bearer {TMDB_BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json;charset=utf-8\"\n}\ndef get_all_genres():\n    \"\"\"\n    Fetch all movie genres.\n    Endpoint: /genre/movie/list\n    \"\"\"\n    url = f\"{BASE_URL}/genre/movie/list\"",
        "detail": "legacy.services.movie_api",
        "documentation": {}
    },
    {
        "label": "seed_movies",
        "kind": 2,
        "importPath": "legacy.services.seed",
        "description": "legacy.services.seed",
        "peekOfCode": "def seed_movies():\n    \"\"\"\n    Seed the movies table by fetching 250 pages of popular movies\n    from the TMDb API if the table is empty.\n    Rate limit: 10 pages per second.\n    Uses executemany to batch insert movie rows.\n    \"\"\"\n    connection = get_db_connection()\n    if connection is None:\n        print(\"Failed to connect to DB for seeding movies.\")",
        "detail": "legacy.services.seed",
        "documentation": {}
    },
    {
        "label": "seed_genres",
        "kind": 2,
        "importPath": "legacy.services.seed",
        "description": "legacy.services.seed",
        "peekOfCode": "def seed_genres():\n    \"\"\"\n    Seed the genres table by querying the TMDb API.\n    Uses executemany to batch insert genres.\n    \"\"\"\n    connection = get_db_connection()\n    if connection is None:\n        print(\"Failed to connect to DB for seeding genres.\")\n        return\n    try:",
        "detail": "legacy.services.seed",
        "documentation": {}
    },
    {
        "label": "seed_cast_and_crew",
        "kind": 2,
        "importPath": "legacy.services.seed",
        "description": "legacy.services.seed",
        "peekOfCode": "def seed_cast_and_crew():\n    \"\"\"\n    For each movie in the DB, query the TMDb API for cast and crew,\n    deduplicate entries, and insert the data into the persons and movie_credits tables.\n    Uses batch inserts and rate limits to 10 requests per second.\n    \"\"\"\n    connection = get_db_connection()\n    if connection is None:\n        print(\"Failed to connect to DB for seeding cast and crew.\")\n        return",
        "detail": "legacy.services.seed",
        "documentation": {}
    },
    {
        "label": "seed_images",
        "kind": 2,
        "importPath": "legacy.services.seed",
        "description": "legacy.services.seed",
        "peekOfCode": "def seed_images():\n    \"\"\"\n    For each movie in the DB, query the TMDb API for images and insert them\n    into the images table.\n    Uses batch inserts and rate limits to 10 requests per second.\n    \"\"\"\n    connection = get_db_connection()\n    if connection is None:\n        print(\"Failed to connect to DB for seeding images.\")\n        return",
        "detail": "legacy.services.seed",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "legacy.app",
        "description": "legacy.app",
        "peekOfCode": "def home():\n    return \"Hello, Flask with dotenv!\"\n@app.route('/api/data', methods=['GET'])\ndef get_data():\n    sample_data = {\n        \"message\": \"Hello from Flask API using dotenv\",\n        \"status\": \"success\"\n    }\n    return jsonify(sample_data)\n# Testing methods from the movie_api.py file",
        "detail": "legacy.app",
        "documentation": {}
    },
    {
        "label": "get_data",
        "kind": 2,
        "importPath": "legacy.app",
        "description": "legacy.app",
        "peekOfCode": "def get_data():\n    sample_data = {\n        \"message\": \"Hello from Flask API using dotenv\",\n        \"status\": \"success\"\n    }\n    return jsonify(sample_data)\n# Testing methods from the movie_api.py file\n@app.route('/api/movies/page/<int:page>', methods=['GET'])\ndef movies_by_page(page):\n    try:",
        "detail": "legacy.app",
        "documentation": {}
    },
    {
        "label": "movies_by_page",
        "kind": 2,
        "importPath": "legacy.app",
        "description": "legacy.app",
        "peekOfCode": "def movies_by_page(page):\n    try:\n        movies = movie_api.get_movie_credits(page)\n        # movies = movie_api.get_movies_by_page(page)\n        return jsonify(movies)\n    except Exception as e:\n        # Return a JSON error message in case of failure\n        return jsonify({\"error\": str(e)}), 500\n# Use a guard to ensure initialization runs only once.\nif not hasattr(app, '_initialized'):",
        "detail": "legacy.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "legacy.app",
        "description": "legacy.app",
        "peekOfCode": "app = Flask(__name__)\napp.config['SECRET_KEY'] = os.getenv('SECRET_KEY')\ntry:\n    # Initialize the database if it doesn't exist\n    initialize_database()\nexcept Exception as e:\n    print(\"Error while connecting to the database:\", e)\n@app.route('/')\ndef home():\n    return \"Hello, Flask with dotenv!\"",
        "detail": "legacy.app",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "legacy.app",
        "description": "legacy.app",
        "peekOfCode": "app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')\ntry:\n    # Initialize the database if it doesn't exist\n    initialize_database()\nexcept Exception as e:\n    print(\"Error while connecting to the database:\", e)\n@app.route('/')\ndef home():\n    return \"Hello, Flask with dotenv!\"\n@app.route('/api/data', methods=['GET'])",
        "detail": "legacy.app",
        "documentation": {}
    },
    {
        "label": "get_all_genres",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_all_genres():\n    \"\"\"\n    Fetch all movie genres from TMDb.\n    Endpoint: GET /genre/movie/list\n    :return: A JSON object containing genres data.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/genre/movie/list\"\n    response = requests.get(url, headers=HEADERS)",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movies_by_genre",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movies_by_genre(genre_id):\n    \"\"\"\n    Fetch movies filtered by a specific genre.\n    Endpoint: GET /discover/movie?with_genres=<genre_id>\n    :param genre_id: The genre ID (int or str) to filter by.\n    :return: A JSON object containing the matching movies.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/discover/movie\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movies_by_page",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movies_by_page(page):\n    \"\"\"\n    Fetch popular movies by page.\n    Endpoint: GET /movie/popular?page=<page>\n    :param page: The page number (int).\n    :return: A JSON object containing popular movies for the given page.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/popular\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_by_id",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movie_by_id(movie_id):\n    \"\"\"\n    Fetch movie details by its ID.\n    Endpoint: GET /movie/<movie_id>\n    :param movie_id: The movie's ID (int or str).\n    :return: A JSON object containing the movie details.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/{movie_id}\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_images",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movie_images(movie_id):\n    \"\"\"\n    Fetch all images for a specific movie.\n    Endpoint: GET /movie/<movie_id>/images\n    :param movie_id: The movie's ID (int or str).\n    :return: A JSON object containing image details.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/{movie_id}/images\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "get_movie_credits",
        "kind": 2,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "def get_movie_credits(movie_id):\n    \"\"\"\n    Fetch cast and crew information for a specific movie.\n    Endpoint: GET /movie/<movie_id>/credits\n    :param movie_id: The movie's ID (int or str).\n    :return: A JSON object containing cast and crew details.\n    :rtype: dict\n    :raises HTTPError: If the request status code is 4xx or 5xx.\n    \"\"\"\n    url = f\"{BASE_URL}/movie/{movie_id}/credits\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "BASE_URL = 'https://api.themoviedb.org/3'\n# Retrieve the TMDb Bearer token from environment variables\nTMDB_BEARER_TOKEN = os.environ.get(\"TMDB_BEARER_TOKEN\")\nif not TMDB_BEARER_TOKEN:\n    raise EnvironmentError(\n        \"TMDB_BEARER_TOKEN is not set in the environment variables.\")\n# Define common headers for the API requests\nHEADERS = {\n    \"Authorization\": f\"Bearer {TMDB_BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json;charset=utf-8\"",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "TMDB_BEARER_TOKEN",
        "kind": 5,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "TMDB_BEARER_TOKEN = os.environ.get(\"TMDB_BEARER_TOKEN\")\nif not TMDB_BEARER_TOKEN:\n    raise EnvironmentError(\n        \"TMDB_BEARER_TOKEN is not set in the environment variables.\")\n# Define common headers for the API requests\nHEADERS = {\n    \"Authorization\": f\"Bearer {TMDB_BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json;charset=utf-8\"\n}\ndef get_all_genres():",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "kind": 5,
        "importPath": "src.api_data_retrieve",
        "description": "src.api_data_retrieve",
        "peekOfCode": "HEADERS = {\n    \"Authorization\": f\"Bearer {TMDB_BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json;charset=utf-8\"\n}\ndef get_all_genres():\n    \"\"\"\n    Fetch all movie genres from TMDb.\n    Endpoint: GET /genre/movie/list\n    :return: A JSON object containing genres data.\n    :rtype: dict",
        "detail": "src.api_data_retrieve",
        "documentation": {}
    },
    {
        "label": "create_db",
        "kind": 2,
        "importPath": "src.create_db_script",
        "description": "src.create_db_script",
        "peekOfCode": "def create_db():\n    \"\"\"\n    Connects to MySQL, creates (if needed) a database, and then creates the required tables.\n    \"\"\"\n    print(\"Creating the database and tables...\")\n    db_host = os.getenv('MYSQL_HOST')\n    db_user = os.getenv('MYSQL_USER')\n    db_password = os.getenv('MYSQL_PASSWORD')\n    db_name = os.getenv('MYSQL_DATABASE')\n    print(f\"Creating database {db_name}...\")",
        "detail": "src.create_db_script",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Creates and returns a MySQL database connection.\n    Adjust host, user, password, and db name as needed.\n    \"\"\"\n    try:\n        conn = mysql.connector.connect(\n            host=os.getenv(\"MYSQL_HOST\"),\n            user=os.getenv(\"MYSQL_USER\"),\n            password=os.getenv(\"MYSQL_PASSWORD\"),",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_1_seed_movies",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_1_seed_movies():\n    \"\"\"\n    Inserts popular movies into the 'movies' table by fetching pages\n    from the TMDb API. Demonstrates a 'seeding' query function.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect to DB for seeding movies.\")\n        return\n    cursor = connection.cursor()",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_2_seed_genres",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_2_seed_genres():\n    \"\"\"\n    Inserts genre data into the 'genres' table by fetching from the TMDb API.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect to DB for seeding genres.\")\n        return\n    cursor = connection.cursor()\n    try:",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_3_seed_cast_and_crew",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_3_seed_cast_and_crew():\n    \"\"\"\n    For each movie in 'movies', fetch the cast & crew from the TMDb API\n    and insert them into 'persons' and 'movie_credits' tables.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect to DB for seeding cast and crew.\")\n        return\n    cursor = connection.cursor(dictionary=True)",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_4_seed_images",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_4_seed_images():\n    \"\"\"\n    For each movie in 'movies', fetch images from the TMDb API\n    and insert them into the 'images' table.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect to DB for seeding images.\")\n        return\n    cursor = connection.cursor(dictionary=True)",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "query_5_example_report",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def query_5_example_report():\n    \"\"\"\n    Example read-only query that might do something interesting:\n    e.g., find the top 5 most popular movies. \n    This isn't a 'seed' function; it's a typical SELECT query.\n    \"\"\"\n    connection = get_db_connection()\n    if not connection:\n        print(\"Failed to connect for query_5_example_report.\")\n        return []",
        "detail": "src.queries_db_script",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.queries_db_script",
        "description": "src.queries_db_script",
        "peekOfCode": "def main():\n    \"\"\"\n    Demonstrates calling each query (i.e., each 'seeding' routine)\n    in sequence, plus an example read-only query.\n    \"\"\"\n    print(\"Starting DB seeding / queries...\")\n    # 1) Seed the 'movies' table\n    query_1_seed_movies()\n    # 2) Seed the 'genres' table\n    query_2_seed_genres()",
        "detail": "src.queries_db_script",
        "documentation": {}
    }
]